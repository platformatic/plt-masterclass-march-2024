// This client was generated by Platformatic from an OpenAPI specification.

// The base URL for the API. This can be overridden by calling `setBaseUrl`.
let baseUrl = ''
/**  @type {import('./api-types.d.ts').Api['setBaseUrl']} */
export const setBaseUrl = (newUrl) => { baseUrl = newUrl }

async function _getExample (url, request) {

  const response = await fetch(`${url}/example`)

  if (!response.ok) {
    throw new Error(await response.text())
  }

  return await response.text()
}

/**  @type {import('./api-types.d.ts').Api['getExample']} */
export const getExample = async (request) => {
  return await _getExample(baseUrl, request)
}
async function _moviesDbGetMovies (url, request) {
  const queryParameters = ['limit', 'offset', 'totalCount', 'fields', 'where.id.eq', 'where.id.neq', 'where.id.gt', 'where.id.gte', 'where.id.lt', 'where.id.lte', 'where.id.like', 'where.id.in', 'where.id.nin', 'where.id.contains', 'where.id.contained', 'where.id.overlaps', 'where.title.eq', 'where.title.neq', 'where.title.gt', 'where.title.gte', 'where.title.lt', 'where.title.lte', 'where.title.like', 'where.title.in', 'where.title.nin', 'where.title.contains', 'where.title.contained', 'where.title.overlaps', 'where.or', 'orderby.id', 'orderby.title']
  const searchParams = new URLSearchParams()
  queryParameters.forEach((qp) => {
    if (request[qp]) {
      searchParams.append(qp, request[qp]?.toString() || '')
      delete request[qp]
    }
  })


  const response = await fetch(`${url}/movies-db/movies/?${searchParams.toString()}`)

  if (!response.ok) {
    throw new Error(await response.text())
  }

  return await response.json()
}

/**  @type {import('./api-types.d.ts').Api['moviesDbGetMovies']} */
export const moviesDbGetMovies = async (request) => {
  return await _moviesDbGetMovies(baseUrl, request)
}
async function _moviesDbCreateMovie (url, request) {
  const headers = {
    'Content-type': 'application/json; charset=utf-8'
  }

  const response = await fetch(`${url}/movies-db/movies/`, {
    method: 'POST',
    body: JSON.stringify(request),
    headers
  })

  if (!response.ok) {
    throw new Error(await response.text())
  }

  return await response.json()
}

/**  @type {import('./api-types.d.ts').Api['moviesDbCreateMovie']} */
export const moviesDbCreateMovie = async (request) => {
  return await _moviesDbCreateMovie(baseUrl, request)
}
async function _moviesDbUpdateMovies (url, request) {
  const queryParameters = ['fields', 'where.id.eq', 'where.id.neq', 'where.id.gt', 'where.id.gte', 'where.id.lt', 'where.id.lte', 'where.id.like', 'where.id.in', 'where.id.nin', 'where.id.contains', 'where.id.contained', 'where.id.overlaps', 'where.title.eq', 'where.title.neq', 'where.title.gt', 'where.title.gte', 'where.title.lt', 'where.title.lte', 'where.title.like', 'where.title.in', 'where.title.nin', 'where.title.contains', 'where.title.contained', 'where.title.overlaps', 'where.or']
  const searchParams = new URLSearchParams()
  queryParameters.forEach((qp) => {
    if (request[qp]) {
      searchParams.append(qp, request[qp]?.toString() || '')
      delete request[qp]
    }
  })

  const headers = {
    'Content-type': 'application/json; charset=utf-8'
  }

  const response = await fetch(`${url}/movies-db/movies/?${searchParams.toString()}`, {
    method: 'PUT',
    body: JSON.stringify(request),
    headers
  })

  if (!response.ok) {
    throw new Error(await response.text())
  }

  return await response.json()
}

/**  @type {import('./api-types.d.ts').Api['moviesDbUpdateMovies']} */
export const moviesDbUpdateMovies = async (request) => {
  return await _moviesDbUpdateMovies(baseUrl, request)
}
async function _moviesDbGetMovieById (url, request) {
  const queryParameters = ['fields']
  const searchParams = new URLSearchParams()
  queryParameters.forEach((qp) => {
    if (request[qp]) {
      searchParams.append(qp, request[qp]?.toString() || '')
      delete request[qp]
    }
  })


  const response = await fetch(`${url}/movies-db/movies/${request['id']}?${searchParams.toString()}`)

  if (!response.ok) {
    throw new Error(await response.text())
  }

  return await response.json()
}

/**  @type {import('./api-types.d.ts').Api['moviesDbGetMovieById']} */
export const moviesDbGetMovieById = async (request) => {
  return await _moviesDbGetMovieById(baseUrl, request)
}
async function _moviesDbUpdateMovie (url, request) {
  const queryParameters = ['fields']
  const searchParams = new URLSearchParams()
  queryParameters.forEach((qp) => {
    if (request[qp]) {
      searchParams.append(qp, request[qp]?.toString() || '')
      delete request[qp]
    }
  })

  const headers = {
    'Content-type': 'application/json; charset=utf-8'
  }

  const response = await fetch(`${url}/movies-db/movies/${request['id']}?${searchParams.toString()}`, {
    method: 'PUT',
    body: JSON.stringify(request),
    headers
  })

  if (!response.ok) {
    throw new Error(await response.text())
  }

  return await response.json()
}

/**  @type {import('./api-types.d.ts').Api['moviesDbUpdateMovie']} */
export const moviesDbUpdateMovie = async (request) => {
  return await _moviesDbUpdateMovie(baseUrl, request)
}
async function _moviesDbDeleteMovies (url, request) {
  const queryParameters = ['fields']
  const searchParams = new URLSearchParams()
  queryParameters.forEach((qp) => {
    if (request[qp]) {
      searchParams.append(qp, request[qp]?.toString() || '')
      delete request[qp]
    }
  })

  const headers = {
    'Content-type': 'application/json; charset=utf-8'
  }

  const response = await fetch(`${url}/movies-db/movies/${request['id']}?${searchParams.toString()}`, {
    method: 'DELETE',
    body: JSON.stringify(request),
    headers
  })

  if (!response.ok) {
    throw new Error(await response.text())
  }

  return await response.json()
}

/**  @type {import('./api-types.d.ts').Api['moviesDbDeleteMovies']} */
export const moviesDbDeleteMovies = async (request) => {
  return await _moviesDbDeleteMovies(baseUrl, request)
}
async function _getMoviesDbExample (url, request) {

  const response = await fetch(`${url}/movies-db/example`)

  if (!response.ok) {
    throw new Error(await response.text())
  }

  return await response.text()
}

/**  @type {import('./api-types.d.ts').Api['getMoviesDbExample']} */
export const getMoviesDbExample = async (request) => {
  return await _getMoviesDbExample(baseUrl, request)
}
async function _getMoviesServiceExample (url, request) {

  const response = await fetch(`${url}/movies-service/example`)

  if (!response.ok) {
    throw new Error(await response.text())
  }

  return await response.text()
}

/**  @type {import('./api-types.d.ts').Api['getMoviesServiceExample']} */
export const getMoviesServiceExample = async (request) => {
  return await _getMoviesServiceExample(baseUrl, request)
}
async function _getMoviesServiceUpperMovies (url, request) {

  const response = await fetch(`${url}/movies-service/upperMovies`)

  if (!response.ok) {
    throw new Error(await response.text())
  }

  return await response.json()
}

/**  @type {import('./api-types.d.ts').Api['getMoviesServiceUpperMovies']} */
export const getMoviesServiceUpperMovies = async (request) => {
  return await _getMoviesServiceUpperMovies(baseUrl, request)
}
export default function build (url) {
  return {
    getExample: _getExample.bind(url, ...arguments),
    moviesDbGetMovies: _moviesDbGetMovies.bind(url, ...arguments),
    moviesDbCreateMovie: _moviesDbCreateMovie.bind(url, ...arguments),
    moviesDbUpdateMovies: _moviesDbUpdateMovies.bind(url, ...arguments),
    moviesDbGetMovieById: _moviesDbGetMovieById.bind(url, ...arguments),
    moviesDbUpdateMovie: _moviesDbUpdateMovie.bind(url, ...arguments),
    moviesDbDeleteMovies: _moviesDbDeleteMovies.bind(url, ...arguments),
    getMoviesDbExample: _getMoviesDbExample.bind(url, ...arguments),
    getMoviesServiceExample: _getMoviesServiceExample.bind(url, ...arguments),
    getMoviesServiceUpperMovies: _getMoviesServiceUpperMovies.bind(url, ...arguments)
  }
}